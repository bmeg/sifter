
class: PlayBook
name: CBioPortal

inputs:
  tar:
    type: File

schema: examples/bmeg-dictionary/gdcdictionary/schemas

steps:
  - desc: Untar
    untar:
      input: "{{input.tar}}"
  - desc: Loading Patient List
    tableLoad:
      input: data_clinical_patient.txt
      transform:
        -
          - project:
              mapping:
                id : "{{row.PATIENT_ID}}"
                submitter_id : "{{row.PATIENT_ID}}"
                type: "case"
                experiments:
                    submitter_id: "TCGA"
          - objectCreate:
              class: case
  - desc: Loading Sample List
    tableLoad:
      input: data_clinical_sample.txt
      transform:
        -
          - project:
              mapping:
                id : "{{row.SAMPLE_ID}}"
                submitter_id : "{{row.SAMPLE_ID}}"
                cases:
                  submitter_id: "{{row.PATIENT_ID}}"
                type: "sample"
          - objectCreate:
              class: sample
        -
          - project:
              mapping:
                id : "{{row.SAMPLE_ID}}-0000"
                submitter_id : "{{row.SAMPLE_ID}}-0000"
                samples:
                  submitter_id: "{{row.SAMPLE_ID}}"
                type: "aliquot"
          - objectCreate:
              class: aliquot
  - desc: Transpose RNA file
    transposeFile:
        input: data_RNA_Seq_expression_median.txt
        output: data_RNA_Seq_expression_median_transpose.txt
  -
    desc: Loading RNA File
    tableLoad:
      input: data_RNA_Seq_expression_median_transpose.txt
      rowSkip: 1
      transform:
        -
          - project:
              mapping:
                id: "gexp:{{row.Entrez_Gene_Id}}" #after the transpose, the index column header is `Entrez_Gene_Id`
                aliquot_id: "{{row.Entrez_Gene_Id}}-0000"
          - map:
              method: nodeMap
              python: >
                def nodeMap(x):
                  values = {}
                  for k, v in x.items():
                    if k != "id" and k != "aliquot_id":
                      values[k] = v
                  return {
                    "id" : x["id"],
                    "aliquot_id" : x["aliquot_id"],
                    "metric" : "OTHER",
                    "values": values
                  }
          - objectCreate:
              class: gene_expression
  - desc: Loading Mutations
    tableLoad:
      input: data_mutations_extended.txt
      transform:
        -
          - alleleID:
              dst: allele_id
              prefix: "Allele:"
              genome: GRCh37
              chromosome: "{{row.Chromosome}}"
              start: "{{row.Start_Position}}"
              end: "{{row.End_Position}}"
              reference_bases: "{{row.Reference_Allele}}"
              alternate_bases: "{{row.Tumor_Seq_Allele1}}"
          - project:
              mapping:
                aliquot: "{{row.Tumor_Sample_Barcode}}-0000"
                ref: "{{row.Reference_Allele}}"
                alt: "{{row.Tumor_Seq_Allele1}}"
                ensembl_transcript: "{{row.Transcript_ID}}"
          - objectCreate:
              class: somatic_variant
          - project:
              mapping:
                genome: "{{row.NCBI_Build}}"
                chromosome: "{{row.Chromosome}}"
                start: "{{row.Start_Position}}"
                end: "{{row.End_Position}}"
                strand: "{{row.Strand}}"
                reference_bases: "{{row.Reference_Allele}}"
                alternate_bases: "{{row.Tumor_Seq_Allele1}}"
                hugo_symbol: "{{row.Hugo_Symbol}}"
                effect: "{{row.Variant_Classification}}"
          - objectCreate:
              class: allele
