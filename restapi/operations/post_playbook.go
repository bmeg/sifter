// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostPlaybookHandlerFunc turns a function with the right signature into a post playbook handler
type PostPlaybookHandlerFunc func(PostPlaybookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPlaybookHandlerFunc) Handle(params PostPlaybookParams) middleware.Responder {
	return fn(params)
}

// PostPlaybookHandler interface for that can handle valid post playbook params
type PostPlaybookHandler interface {
	Handle(PostPlaybookParams) middleware.Responder
}

// NewPostPlaybook creates a new http.Handler for the post playbook operation
func NewPostPlaybook(ctx *middleware.Context, handler PostPlaybookHandler) *PostPlaybook {
	return &PostPlaybook{Context: ctx, Handler: handler}
}

/*PostPlaybook swagger:route POST /playbook postPlaybook

Starts loading a manifest

Post a manifest to start loading into GRIP

*/
type PostPlaybook struct {
	Context *middleware.Context
	Handler PostPlaybookHandler
}

func (o *PostPlaybook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostPlaybookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
